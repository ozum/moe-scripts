{"version":3,"sources":["../src/utils-moe.js"],"names":["fs","require","path","chalk","writeJsonFile","fromRoot","hasPkgProp","pkg","set","yargsParser","isTypeScript","mark","check","green","cross","red","warn","yellow","logMessage","message","options","Error","pre","log","console","getOutDestinationIndex","args","index","indexOf","normalizeOutDestination","argName","result","splice","createSymLink","target","projectFile","force","type","lstatSync","isDirectory","linkType","targetPath","resolve","relative","sourcePath","existsSync","isSymbolicLink","unlinkSync","symlinkSync","createFile","data","filePath","writeFileSync","copyFile","source","fileExists","copyFileSync","writeJson","file","sync","indent","setPkg","updatedKeys","skippedKeys","Object","keys","forEach","key","push","length","join","createModuleSymLink","name","modulePath","module","exports"],"mappings":"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","file":"utils-moe.js","sourcesContent":["const fs = require(\"fs\");\nconst path = require(\"path\");\nconst chalk = require(\"chalk\");\nconst writeJsonFile = require('write-json-file');\nconst { fromRoot, hasPkgProp, pkg } = require(\"./utils\");\nconst set = require(\"lodash.set\");\nconst yargsParser = require(\"yargs-parser\");\n\nconst isTypeScript = hasPkgProp('types');\n\nconst mark = {\n  check: chalk.green(\"✔\"),\n  cross: chalk.red(\"✕\"),\n  warn: chalk.yellow(\"O\"),\n};\n\n/**\n * Logs given message\n * @param {string}  message         - Message to log\n * @param {Object}  [options]       - Options\n * @param {boolean} [options.log]   - If true, emits output to console.\n * @param {string}  [options.mark]  - Mark to put at the beginning of message.\n */\nfunction logMessage(message, options) {\n  if (options.mark && !mark[options.mark]) {\n    throw new Error('Wrong mark option');\n  }\n  const pre = options.mark ? `${mark[options.mark]} ` : '';\n  if (options && options.log) {\n    console.log(`${pre} ${message}`);\n  }\n}\n\n/**\n * Returns index of output destination argument name (not value) of given array.\n * Considers all possible acceptable names among compatible tools of this toolkit.\n * If there isn't any, returns -1.\n * @param   {Array} args  - Array to get position from\n * @returns {number}      - Index position of argument name, -1 if none found.\n * @example\n * getOutDestinationIndex(['.', '.', '--outDir': '...']); // 2\n * getOutDestinationIndex(['--out-dir': '...']);          // 1\n */\nfunction getOutDestinationIndex(args) {\n  let index = args.indexOf(\"--outDir\");\n  if (index > -1) return index;\n\n  index = args.indexOf(\"--out-dir\");\n  if (index > -1) return index;\n\n  return -1;\n}\n\n/**\n * Returns a new array, after replacing output destination argument name with a new name.\n * Does not mutate original array. Used to normalize different builders' parameters.\n * As a result, it is possible to change build tool without changing output destination argument name.\n * If args does not contain output destination, return\n * @param   {Array}   args    - Arguments to normalize\n * @param   {string}  argName - Argument name to use for destination parameter.\n * @returns {Array}           - A new array with given parameter name.\n * @example\n * normalizeOutDestination(['--outDir': '...'], '--out-dir');  // [ '--out-dir': '...' ]\n * normalizeOutDestination(['--out-dir': '...'], '--out-dir'); // [ '--out-dir': '...' ]\n */\nfunction normalizeOutDestination(args, argName) {\n  const result = [...args];\n  const index = getOutDestinationIndex(result);\n\n  if (index > -1 && result[index] !== argName) {\n    result.splice(result, 1, argName);\n  }\n\n  return result;\n}\n\n/**\n * Creates a symbolic link from created file to target file using relative path.\n * Path of file to be created should be given relative to project path.\n * @param {string}  target                - Target file which link points to.\n * @param {string}  projectFile           - File path to relative to project root.\n * @param {Object}  [options]             - Options\n * @param {boolean} [options.log=true]    - Emits output to console.\n * @param {boolean} [options.force=false] - Writes file even it exists and it is a symlink. (Does not delete non-symlink)\n * @example\n * // Creates tsconfig.json symbolic link file in project root, pointing to a file from toolkit.\n * createSymLink(here('../../config.json'), 'tsconfig.json');\n */\nfunction createSymLink(target, projectFile, { force = false, log = true } = {}) {\n  const type = fs.lstatSync(target).isDirectory() ? \"dir\" : \"file\";\n  const linkType = type === 'dir' ? 'absolute' : 'relative';\n  const targetPath = type === \"dir\" ? path.resolve(target) : path.relative(fromRoot(), target);\n  const sourcePath = fromRoot(projectFile);\n\n  if (fs.existsSync(sourcePath) && force && fs.lstatSync(sourcePath).isSymbolicLink()) {\n    fs.unlinkSync(sourcePath);\n    logMessage(`Deleted Symbolic Link (force): ${projectFile}`, { log, mark: 'check' });\n  }\n\n  if (!fs.existsSync(sourcePath)) {\n    fs.symlinkSync(targetPath, sourcePath, type);\n    logMessage(`Created Symbolic Link (${linkType}): ${projectFile} -> ${targetPath}`, { log, mark: 'check' });\n  } else {\n    logMessage(`Skipped Symbolic Link (File exists): ${projectFile}`, { log, mark: 'warn' });\n  }\n}\n\n/**\n * Creates and writes given data to a file in project.\n * @param {string}  projectFile           - File path to relative to project root.\n * @param {string}  data                  - Data to write\n * @param {Object}  [options]             - Options\n * @param {boolean} [options.log=true]    - Emits output to console.\n * @param {boolean} [options.force=false] - Writes file even it exists.\n */\nfunction createFile(projectFile, data,  { force = false, log = true } = {}) {\n  const filePath = fromRoot(projectFile);\n\n  if (fs.existsSync(filePath) && force) {\n    fs.unlinkSync(filePath);\n    logMessage(`Deleted File (force): ${projectFile}`, { log, mark: 'check' });\n  }\n\n  if (!fs.existsSync(filePath)) {\n    fs.writeFileSync(filePath, data);\n    logMessage(`Created File: ${projectFile}`, { log, mark: 'check' });\n  } else {\n    logMessage(`Skipped File (File exists): ${projectFile}`, { log, mark: 'warn' });\n  }\n}\n\n/**\n * Copeis given file to path given relative to project directory.\n * @param {string}  source                - Source file to copy\n * @param {string}  projectFile           - File path to relative to project root.\n * @param {Object}  [options]             - Options\n * @param {boolean} [options.log=true]    - Emits output to console.\n * @param {boolean} [options.force=false] - Writes file even it exists.\n */\nfunction copyFile(source, projectFile, { force = false, log = true } = {}) {\n  const filePath = fromRoot(projectFile);\n  const fileExists = fs.existsSync(filePath);\n\n  if (fileExists && !force) {\n    logMessage(`Skipped File Copy: ${source} -> ${projectFile}`, { log, mark: 'warn' });\n  }\n\n  if (!fileExists || force) {\n    fs.copyFileSync(source, filePath);\n    logMessage(`Copied File: ${source} -> ${projectFile}`, { log, mark: 'check' });\n  }\n}\n\n/**\n * Creates a file and writes given object as JSON data to file whose path is relative to project's root.\n * If file exists it does not create file.\n * @param {string}  file                  - File path to create\n * @param {Object}  data                  - Data to write as JSON\n * @param {Object}  [options]             - Options\n * @param {boolean} [options.log=true]    - Emits output to console.\n * @param {boolean} [options.force=false] - Writes file even it exists.\n */\nfunction writeJson(file, data, { force = false, log = true } = {}) {\n  const filePath = fromRoot(file);\n  if (!fs.existsSync(filePath) || force) {\n    writeJsonFile.sync(filePath, data, { indent: 2 });\n    logMessage(`Written JSON File: ${file}`, { log, mark: 'check' });\n  } else {\n    logMessage(`Skipped JSON File (File exists): ${file}`, { log, mark: 'warn' });\n  }\n}\n\n/**\n * Updates key with given value in project's package.json.\n * @param {Object}  data                  - Data to set in package.json (Keys are key paths, values are values)\n * @param {Object}  [options]             - Options\n * @param {boolean} [options.log=true]    - Emits output to console.\n * @param {boolean} [options.force=false] - Sets key even if exists.\n * @example\n * setPkg({\n *   \"scripts.lint\": \"moe-scripts lint\",\n *   \"scripts.test\": \"moe-scripts test\",\n * });\n */\nfunction setPkg(data, { force = false, log = true } = {}) {\n  const updatedKeys = [];\n  const skippedKeys = [];\n\n  Object.keys(data).forEach(key => {\n    if (!hasPkgProp(key) || force) {\n      updatedKeys.push(key);\n      set(pkg, key, data[key]);\n    } else {\n      skippedKeys.push(key);\n    }\n  });\n\n  if (skippedKeys.length > 0) {\n    logMessage(`Following keys are not updated in package.json (they exist): ${skippedKeys.join(', ')}.`, { log, mark: 'warn' });\n  }\n  if (updatedKeys.length > 0) {\n    logMessage(`Following keys are updated in package.json: ${updatedKeys.join(', ')}.`, { log, mark: 'check' });\n    writeJson('package.json', pkg, { force: true });\n  }\n}\n\n/**\n * Creates symbolic link to given module in node_modules directory of project\n * @param {string} name - Name of the module.\n */\nfunction createModuleSymLink(name) {\n  const modulePath = path.resolve(path.join(require.resolve(`${name}/package.json`), \"..\"));\n  createSymLink(modulePath, `node_modules/${name}`, { force: true });\n}\n\n\nmodule.exports = {\n  normalizeOutDestination,\n  createSymLink,\n  writeJson,\n  createFile,\n  copyFile,\n  logMessage,\n  isTypeScript,\n  setPkg,\n  createModuleSymLink,\n};\n"]}