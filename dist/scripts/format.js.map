{"version":3,"sources":["../../src/scripts/format.js"],"names":["path","require","spawn","yargsParser","hasPkgProp","resolveBin","hasFile","args","process","argv","slice","parsedArgs","here","join","__dirname","p","hereRelative","replace","cwd","useBuiltinConfig","includes","config","useBuiltinIgnore","ignore","write","relativeArgs","map","a","filesToApply","_","length","result","sync","concat","stdio","exit","status"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AACA,IAAME,cAAcF,QAAQ,cAAR,CAApB;;eAC4CA,QAAQ,UAAR,C;IAApCG,U,YAAAA,U;IAAYC,U,YAAAA,U;IAAYC,O,YAAAA,O;;AAEhC,IAAMC,OAAOC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,IAAMC,aAAaR,YAAYI,IAAZ,CAAnB;;AAEA,IAAMK,OAAO;AAAA,SAAKZ,KAAKa,IAAL,CAAUC,SAAV,EAAqBC,CAArB,CAAL;AAAA,CAAb;;AACA,IAAMC,eAAe;AAAA,SAAKJ,KAAKG,CAAL,EAAQE,OAAR,CAAgBT,QAAQU,GAAR,EAAhB,EAA+B,GAA/B,CAAL;AAAA,CAArB;;AAEA,IAAMC,mBACJ,CAACZ,KAAKa,QAAL,CAAc,UAAd,CAAD,IACA,CAACd,QAAQ,aAAR,CADD,IAEA,CAACA,QAAQ,oBAAR,CAFD,IAGA,CAACF,WAAW,YAAX,CAJH;AAKA,IAAMiB,SAASF,mBACX,CAAC,UAAD,EAAaH,aAAa,yBAAb,CAAb,CADW,GAEX,EAFJ;AAIA,IAAMM,mBACJ,CAACf,KAAKa,QAAL,CAAc,eAAd,CAAD,IAAmC,CAACd,QAAQ,iBAAR,CADtC;AAEA,IAAMiB,SAASD,mBACX,CAAC,eAAD,EAAkBN,aAAa,0BAAb,CAAlB,CADW,GAEX,EAFJ;AAIA,IAAMQ,QAAQjB,KAAKa,QAAL,CAAc,YAAd,IAA8B,EAA9B,GAAmC,CAAC,SAAD,CAAjD,C,CAEA;AACA;AACA;;AACA,IAAMK,eAAelB,KAAKmB,GAAL,CAAS;AAAA,SAAKC,EAAEV,OAAF,CAAW,GAAET,QAAQU,GAAR,EAAc,GAA3B,EAA+B,EAA/B,CAAL;AAAA,CAAT,CAArB;AAEA,IAAMU,eAAejB,WAAWkB,CAAX,CAAaC,MAAb,GACjB,EADiB,GAEjB,CAAC,wCAAD,CAFJ;AAIA,IAAMC,SAAS7B,MAAM8B,IAAN,CACb3B,WAAW,UAAX,CADa,EAETgB,MAAJ,QAAeE,MAAf,EAA0BC,KAA1B,EAAoCI,YAApC,EAAkDK,MAAlD,CAAyDR,YAAzD,CAFa,EAGb;AAAES,SAAO;AAAT,CAHa,CAAf;AAMA1B,QAAQ2B,IAAR,CAAaJ,OAAOK,MAApB","file":"format.js","sourcesContent":["const path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst yargsParser = require(\"yargs-parser\");\nconst { hasPkgProp, resolveBin, hasFile } = require(\"../utils\");\n\nconst args = process.argv.slice(2);\nconst parsedArgs = yargsParser(args);\n\nconst here = p => path.join(__dirname, p);\nconst hereRelative = p => here(p).replace(process.cwd(), \".\");\n\nconst useBuiltinConfig =\n  !args.includes(\"--config\") &&\n  !hasFile(\".prettierrc\") &&\n  !hasFile(\"prettier.config.js\") &&\n  !hasPkgProp(\"prettierrc\");\nconst config = useBuiltinConfig\n  ? [\"--config\", hereRelative(\"../config/prettierrc.js\")]\n  : [];\n\nconst useBuiltinIgnore =\n  !args.includes(\"--ignore-path\") && !hasFile(\".prettierignore\");\nconst ignore = useBuiltinIgnore\n  ? [\"--ignore-path\", hereRelative(\"../config/prettierignore\")]\n  : [];\n\nconst write = args.includes(\"--no-write\") ? [] : [\"--write\"];\n\n// this ensures that when running format as a pre-commit hook and we get\n// the full file path, we make that non-absolute so it is treated as a glob,\n// This way the prettierignore will be applied\nconst relativeArgs = args.map(a => a.replace(`${process.cwd()}/`, \"\"));\n\nconst filesToApply = parsedArgs._.length\n  ? []\n  : [\"**/*.+(js|jsx|json|less|css|ts|tsx|md)\"];\n\nconst result = spawn.sync(\n  resolveBin(\"prettier\"),\n  [...config, ...ignore, ...write, ...filesToApply].concat(relativeArgs),\n  { stdio: \"inherit\" }\n);\n\nprocess.exit(result.status);\n"]}