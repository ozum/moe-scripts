{"version":3,"sources":["../../../src/scripts/lint/eslint.js"],"names":["path","require","spawn","yargsParser","hasPkgProp","resolveBin","hasFile","args","process","argv","slice","here","join","__dirname","p","hereRelative","replace","cwd","parsedArgs","useBuiltinConfig","includes","config","useBuiltinIgnore","ignore","cache","filesGiven","_","length","filesToApply","filter","a","endsWith","result","sync","stdio","exit","status"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AACA,IAAME,cAAcF,QAAQ,cAAR,CAApB;;eAC4CA,QAAQ,aAAR,C;IAApCG,U,YAAAA,U;IAAYC,U,YAAAA,U;IAAYC,O,YAAAA,O;;AAEhC,IAAIC,OAAOC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX;;AACA,IAAMC,OAAO;AAAA,SAAKX,KAAKY,IAAL,CAAUC,SAAV,EAAqBC,CAArB,CAAL;AAAA,CAAb;;AACA,IAAMC,eAAe;AAAA,SAAKJ,KAAKG,CAAL,EAAQE,OAAR,CAAgBR,QAAQS,GAAR,EAAhB,EAA+B,GAA/B,CAAL;AAAA,CAArB;;AACA,IAAMC,aAAaf,YAAYI,IAAZ,CAAnB;AAEA,IAAMY,mBACJ,CAACZ,KAAKa,QAAL,CAAc,UAAd,CAAD,IACA,CAACd,QAAQ,WAAR,CADD,IAEA,CAACA,QAAQ,cAAR,CAFD,IAGA,CAACF,WAAW,cAAX,CAJH;AAMA,IAAMiB,SAASF,mBACX,CAAC,UAAD,EAAaJ,aAAa,0BAAb,CAAb,CADW,GAEX,EAFJ;AAIA,IAAMO,mBACJ,CAACf,KAAKa,QAAL,CAAc,eAAd,CAAD,IACA,CAACd,QAAQ,eAAR,CADD,IAEA,CAACF,WAAW,cAAX,CAHH;AAKA,IAAMmB,SAASD,mBACX,CAAC,eAAD,EAAkB,YAAlB,CADW,CACqB;AADrB,EAEX,EAFJ;AAIA,IAAME,QAAQjB,KAAKa,QAAL,CAAc,YAAd,IAA8B,EAA9B,GAAmC,CAAC,SAAD,CAAjD;AAEA,IAAMK,aAAaP,WAAWQ,CAAX,CAAaC,MAAb,GAAsB,CAAzC;AAEA,IAAMC,eAAeH,aAAa,EAAb,GAAkB,CAAC,GAAD,CAAvC;;AAEA,IAAIA,UAAJ,EAAgB;AACd;AACA;AACA;AACAlB,SAAOA,KAAKsB,MAAL,CAAY;AAAA,WAAK,CAACX,WAAWQ,CAAX,CAAaN,QAAb,CAAsBU,CAAtB,CAAD,IAA6BA,EAAEC,QAAF,CAAW,KAAX,CAAlC;AAAA,GAAZ,CAAP;AACD;;AAED,IAAMC,SAAS9B,MAAM+B,IAAN,CACb5B,WAAW,QAAX,CADa,EAETgB,MAFS,QAEEE,MAFF,EAEaC,KAFb,EAEuBjB,IAFvB,EAEgCqB,YAFhC,GAGb;AAAEM,SAAO;AAAT,CAHa,CAAf;AAMA1B,QAAQ2B,IAAR,CAAaH,OAAOI,MAApB","file":"eslint.js","sourcesContent":["const path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst yargsParser = require(\"yargs-parser\");\nconst { hasPkgProp, resolveBin, hasFile } = require(\"../../utils\");\n\nlet args = process.argv.slice(2);\nconst here = p => path.join(__dirname, p);\nconst hereRelative = p => here(p).replace(process.cwd(), \".\");\nconst parsedArgs = yargsParser(args);\n\nconst useBuiltinConfig =\n  !args.includes(\"--config\") &&\n  !hasFile(\".eslintrc\") &&\n  !hasFile(\".eslintrc.js\") &&\n  !hasPkgProp(\"eslintConfig\");\n\nconst config = useBuiltinConfig\n  ? [\"--config\", hereRelative(\"../../config/eslintrc.js\")]\n  : [];\n\nconst useBuiltinIgnore =\n  !args.includes(\"--ignore-path\") &&\n  !hasFile(\".eslintignore\") &&\n  !hasPkgProp(\"eslintIgnore\");\n\nconst ignore = useBuiltinIgnore\n  ? [\"--ignore-path\", '.gitignore'] //  ? [\"--ignore-path\", hereRelative(\"../../config/eslintignore\")]\n  : [];\n\nconst cache = args.includes(\"--no-cache\") ? [] : [\"--cache\"];\n\nconst filesGiven = parsedArgs._.length > 0;\n\nconst filesToApply = filesGiven ? [] : [\".\"];\n\nif (filesGiven) {\n  // we need to take all the flag-less arguments (the files that should be linted)\n  // and filter out the ones that aren't js files. Otherwise json or css files\n  // may be passed through\n  args = args.filter(a => !parsedArgs._.includes(a) || a.endsWith(\".js\"));\n}\n\nconst result = spawn.sync(\n  resolveBin(\"eslint\"),\n  [...config, ...ignore, ...cache, ...args, ...filesToApply],\n  { stdio: \"inherit\" }\n);\n\nprocess.exit(result.status);\n"]}