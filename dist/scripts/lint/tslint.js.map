{"version":3,"sources":["../../../src/scripts/lint/tslint.js"],"names":["path","require","spawn","yargsParser","resolveBin","hasFile","args","process","argv","slice","here","join","__dirname","p","hereRelative","replace","cwd","parsedArgs","useBuiltinConfig","includes","config","filesGiven","_","length","filter","a","endsWith","useDefaultProject","project","result","sync","stdio","exit","status"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AACA,IAAME,cAAcF,QAAQ,cAAR,CAApB;;eACgCA,QAAQ,aAAR,C;IAAxBG,U,YAAAA,U;IAAYC,O,YAAAA,O;;AAEpB,IAAIC,OAAOC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX;;AACA,IAAMC,OAAO;AAAA,SAAKV,KAAKW,IAAL,CAAUC,SAAV,EAAqBC,CAArB,CAAL;AAAA,CAAb;;AACA,IAAMC,eAAe;AAAA,SAAKJ,KAAKG,CAAL,EAAQE,OAAR,CAAgBR,QAAQS,GAAR,EAAhB,EAA+B,GAA/B,CAAL;AAAA,CAArB;;AACA,IAAMC,aAAad,YAAYG,IAAZ,CAAnB;AAEA,IAAMY,mBACJ,CAACZ,KAAKa,QAAL,CAAc,UAAd,CAAD,IACA,CAACd,QAAQ,aAAR,CAFH;AAIA,IAAMe,SAASF,mBACX,CAAC,UAAD,EAAaJ,aAAa,8BAAb,CAAb,CADW,GAEX,EAFJ;AAIA,IAAMO,aAAaJ,WAAWK,CAAX,CAAaC,MAAb,GAAsB,CAAzC;;AAEA,IAAIF,UAAJ,EAAgB;AACd;AACA;AACA;AACAf,SAAOA,KAAKkB,MAAL,CAAY;AAAA,WAAK,CAACP,WAAWK,CAAX,CAAaH,QAAb,CAAsBM,CAAtB,CAAD,IAA6BA,EAAEC,QAAF,CAAW,KAAX,CAAlC;AAAA,GAAZ,CAAP;AACD;;AAED,IAAMC,oBAAoB,CAACN,UAAD,IAAe,CAACf,KAAKa,QAAL,CAAc,WAAd,CAA1C;AAEA,IAAMS,UAAWD,oBAAoB,CAAC,WAAD,EAAc,iBAAd,CAApB,GAAuD,EAAxE;AAEA,IAAME,SAAS3B,MAAM4B,IAAN,CACb1B,WAAW,QAAX,CADa,EAETgB,MAFS,QAEEd,IAFF,EAEWsB,OAFX,GAGb;AAAEG,SAAO;AAAT,CAHa,CAAf;AAMAxB,QAAQyB,IAAR,CAAaH,OAAOI,MAApB","file":"tslint.js","sourcesContent":["const path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst yargsParser = require(\"yargs-parser\");\nconst { resolveBin, hasFile } = require(\"../../utils\");\n\nlet args = process.argv.slice(2);\nconst here = p => path.join(__dirname, p);\nconst hereRelative = p => here(p).replace(process.cwd(), \".\");\nconst parsedArgs = yargsParser(args);\n\nconst useBuiltinConfig =\n  !args.includes(\"--config\") &&\n  !hasFile(\"tslint.json\");\n\nconst config = useBuiltinConfig\n  ? [\"--config\", hereRelative(\"../../../tslint-backend.json\")]\n  : [];\n\nconst filesGiven = parsedArgs._.length > 0;\n\nif (filesGiven) {\n  // we need to take all the flag-less arguments (the files that should be linted)\n  // and filter out the ones that aren't ts files. Otherwise json or css files\n  // may be passed through\n  args = args.filter(a => !parsedArgs._.includes(a) || a.endsWith(\".ts\"));\n}\n\nconst useDefaultProject = !filesGiven && !args.includes(\"--project\");\n\nconst project =  useDefaultProject ? [\"--project\", \"./tsconfig.json\"] : [];\n\nconst result = spawn.sync(\n  resolveBin(\"tslint\"),\n  [...config, ...args, ...project],\n  { stdio: \"inherit\" }\n);\n\nprocess.exit(result.status);\n"]}