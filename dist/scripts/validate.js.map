{"version":3,"sources":["../../src/scripts/validate.js"],"names":["spawn","require","parseEnv","resolveBin","ifScript","getConcurrentlyArgs","isTypeScript","precommit","validateScripts","process","argv","useDefaultScripts","scripts","lint","test","flow","typescript","nsp","split","reduce","scriptsToRun","name","result","sync","stdio","exit","status"],"mappings":"AAAA,IAAMA,QAAQC,QAAQ,aAAR,CAAd;;eACgEA,QAAQ,UAAR,C;IAAxDC,Q,YAAAA,Q;IAAUC,U,YAAAA,U;IAAYC,Q,YAAAA,Q;IAAUC,mB,YAAAA,mB;;gBACfJ,QAAQ,cAAR,C;IAAjBK,Y,aAAAA,Y,EAER;AACA;AACA;;;AACA,IAAMC,YAAYL,SAAS,mBAAT,EAA8B,KAA9B,CAAlB;AAEA,IAAMM,kBAAkBC,QAAQC,IAAR,CAAa,CAAb,CAAxB;AAEA,IAAMC,oBAAoB,OAAOH,eAAP,KAA2B,QAArD;AAEA,IAAMI,UAAUD,oBACZ;AACE;AACAE,QAAMN,YAAY,IAAZ,GAAmBH,SAAS,MAAT,EAAiB,uBAAjB,CAF3B;AAGEU,QAAMP,YAAY,IAAZ,GAAmBH,SAAS,MAAT,EAAiB,qCAAjB,CAH3B;AAIEW,QAAMX,SAAS,MAAT,EAAiB,uBAAjB,CAJR;AAKEY,cAAYV,eAAgB,GAAEH,WAAW,KAAX,CAAkB,WAApC,GAAiD,IAL/D;AAMEc,OAAKV,YAAa,GAAEJ,WAAW,KAAX,CAAkB,QAAjC,GAA2C;AANlD,CADY,GASZK,gBAAgBU,KAAhB,CAAsB,GAAtB,EAA2BC,MAA3B,CAAkC,UAACC,YAAD,EAAeC,IAAf,EAAwB;AACxDD,eAAaC,IAAb,IAAsB,WAAUA,IAAK,WAArC;AACA,SAAOD,YAAP;AACD,CAHD,EAGG,EAHH,CATJ;AAcA,IAAME,SAAStB,MAAMuB,IAAN,CAAWpB,WAAW,cAAX,CAAX,EAAuCE,oBAAoBO,OAApB,CAAvC,EAAqE;AAAEY,SAAO;AAAT,CAArE,CAAf;AAEAf,QAAQgB,IAAR,CAAaH,OAAOI,MAApB","file":"validate.js","sourcesContent":["const spawn = require(\"cross-spawn\");\nconst { parseEnv, resolveBin, ifScript, getConcurrentlyArgs } = require(\"../utils\");\nconst { isTypeScript } = require(\"../utils-moe\");\n\n// precommit runs linting and tests on the relevant files\n// so those scripts don't need to be run if we're running\n// this in the context of a precommit hook.\nconst precommit = parseEnv(\"SCRIPTS_PRECOMMIT\", false);\n\nconst validateScripts = process.argv[2];\n\nconst useDefaultScripts = typeof validateScripts !== \"string\";\n\nconst scripts = useDefaultScripts\n  ? {\n      // build: ifScript(\"build\", \"npm run build --silent\"),\n      lint: precommit ? null : ifScript(\"lint\", \"npm run lint --silent\"),\n      test: precommit ? null : ifScript(\"test\", \"npm run test --silent -- --coverage\"),\n      flow: ifScript(\"flow\", \"npm run flow --silent\"),\n      typescript: isTypeScript ? `${resolveBin(\"tsc\")} --noemit` : null,\n      nsp: precommit ? `${resolveBin(\"nsp\")} check` : null,\n    }\n  : validateScripts.split(\",\").reduce((scriptsToRun, name) => {\n      scriptsToRun[name] = `npm run ${name} --silent`;\n      return scriptsToRun;\n    }, {});\n\nconst result = spawn.sync(resolveBin(\"concurrently\"), getConcurrentlyArgs(scripts), { stdio: \"inherit\" });\n\nprocess.exit(result.status);\n"]}