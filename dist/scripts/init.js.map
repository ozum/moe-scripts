{"version":3,"sources":["../../src/scripts/init.js"],"names":["require","install","mkdirp","path","fs","yargsParser","handlebars","isTypeScript","createSymLink","createFile","copyFile","writeJson","createModuleSymLink","setPkg","pkg","args","process","argv","slice","parsedArgs","array","isCompiled","target","includes","isBackend","outDir","configFile","join","__dirname","p","gitignoreFile","sync","force","compile","readFileSync","encoding","extends"],"mappings":"AAAA;;;AAGAA,QAAQ,oBAAR,EAA8BC,OAA9B;;AACA,IAAMC,SAASF,QAAQ,QAAR,CAAf;;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;;AACA,IAAMI,KAAKJ,QAAQ,IAAR,CAAX;;AACA,IAAMK,cAAcL,QAAQ,cAAR,CAApB;;AACA,IAAMM,aAAaN,QAAQ,YAAR,CAAnB;;eACsGA,QAAQ,cAAR,C;IAA9FO,Y,YAAAA,Y;IAAcC,a,YAAAA,a;IAAeC,U,YAAAA,U;IAAYC,Q,YAAAA,Q;IAAUC,S,YAAAA,S;IAAWC,mB,YAAAA,mB;IAAqBC,M,YAAAA,M;;gBAC3Eb,QAAQ,UAAR,C;IAARc,G,aAAAA,G,EACR;;;AAEA,IAAMC,OAAOC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,IAAMC,aAAad,YAAYU,IAAZ,EAAkB;AAAEK,SAAO,CAAC,QAAD;AAAT,CAAlB,CAAnB;AAEA,IAAMC,aAAa,CAACF,WAAWG,MAAX,IAAqB,EAAtB,EAA0BC,QAA1B,CAAmC,UAAnC,KAAkDhB,YAArE;AACA,IAAMiB,YAAY,CAAC,CAACL,WAAWG,MAAX,IAAqB,EAAtB,EAA0BC,QAA1B,CAAmC,UAAnC,CAAnB;AACA,IAAME,SAASD,YAAY,KAAZ,GAAoB,MAAnC,C,CAEA;;AACA,IAAME,aAAa;AAAA,SAAKvB,KAAKwB,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkCC,CAAlC,CAAL;AAAA,CAAnB;;AACA,IAAMC,gBAAgBT,aAAa,SAAb,GAAyB,aAA/C;AAEAR,OAAO;AACL,mBAAkB,oBAAmBN,eAAe,EAAf,GAAoB,gBAAiB,EADrE;AAEL,uBAAsB,4BAFjB;AAGL,kBAAgB,kBAHX;AAIL,yBAAuB,mCAJlB;AAKL,kBAAgB,kBALX;AAML,oBAAkB,oBANb;AAOL,sBAAoB,sBAPf;AAQL,uBAAqB,uBARhB;AASL,yBAAuB,4CATlB;AAUL,4BAA0B;AAVrB,CAAP;AAaAL,OAAO6B,IAAP,CAAY,qBAAZ;AACAnB,oBAAoB,aAApB;AACAA,oBAAoB,aAApB;AAEAH,WAAW,MAAX,EAAmB,EAAnB;AACAA,WAAW,aAAX,EAA0B,gCAA1B;AACAD,cAAckB,WAAY,aAAYI,aAAc,EAAtC,CAAd,EAAwD,YAAxD,EAAsE;AAAEE,SAAO;AAAT,CAAtE;AACAxB,cAAckB,WAAY,eAAZ,CAAd,EAA2C,gBAA3C,EAA6D;AAAEM,SAAO;AAAT,CAA7D;AACAtB,SAASgB,WAAW,cAAX,CAAT,EAAqC,cAArC;AACAjB,WAAW,SAAX,EAAsB,EAAtB;AACAA,WAAW,YAAX,EAAyBH,WAAW2B,OAAX,CAAmB7B,GAAG8B,YAAH,CAAgBR,WAAW,YAAX,CAAhB,EAA0C;AAAES,YAAU;AAAZ,CAA1C,CAAnB,EAAoFrB,GAApF,CAAzB;AACAL,WAAW,gBAAX,EAA6B,2DAA7B,E,CAEA;AACA;;AACA,IAAIF,YAAJ,EAAkB;AAChBK,sBAAoB,QAApB;AACAD,YAAU,aAAV,EAAyB;AAAEyB,aAAS;AAAX,GAAzB;AACD,CAHD,MAGO;AACLxB,sBAAoB,QAApB;AACAD,YAAU,WAAV,EAAuB;AAAEyB,aAAS;AAAX,GAAvB;AACD,C,CAED;;;AACA,IAAI7B,YAAJ,EAAkB;AAChBC,gBAAckB,WAAW,uBAAX,CAAd,EAAmD,eAAnD;AACAlB,gBAAckB,WAAW,4BAAX,CAAd,EAAwD,oBAAxD;AACD,C,CAED;;;AACAd,oBAAoB,UAApB;AAEAA,oBAAoB,SAApB","file":"init.js","sourcesContent":["/**\n * --target frontend | backend | compiled (Mulitple selection)\n */\nrequire(\"source-map-support\").install();\nconst mkdirp = require(\"mkdirp\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst yargsParser = require(\"yargs-parser\");\nconst handlebars = require(\"handlebars\");\nconst { isTypeScript, createSymLink, createFile, copyFile, writeJson, createModuleSymLink, setPkg } = require(\"../utils-moe\");\nconst { pkg } = require(\"../utils\");\n// const { outDir, create, customize } = require(\"./utils\");\n\nconst args = process.argv.slice(2);\nconst parsedArgs = yargsParser(args, { array: [\"target\"] });\n\nconst isCompiled = (parsedArgs.target || []).includes(\"compiled\") || isTypeScript;\nconst isBackend = !(parsedArgs.target || []).includes(\"frontend\");\nconst outDir = isBackend ? \"lib\" : \"dist\";\n\n//const here = p => path.join(__dirname, p);\nconst configFile = p => path.join(__dirname, \"../config\", p);\nconst gitignoreFile = isCompiled ? \"compile\" : \"non-compile\";\n\nsetPkg({\n  \"scripts.build\": `moe-scripts build${isTypeScript ? '' : ' --source-maps'}`,\n  \"scripts.build:doc\": `moe-scripts doc --no-cache`,\n  \"scripts.test\": \"moe-scripts test\",\n  \"scripts.test:update\": \"moe-scripts test --updateSnapshot\",\n  \"scripts.lint\": \"moe-scripts lint\",\n  \"scripts.format\": \"moe-scripts format\",\n  \"scripts.validate\": \"moe-scripts validate\",\n  \"scripts.precommit\": \"moe-scripts precommit\",\n  \"scripts.postversion\": \"git push && git push --tags && npm publish\",\n  \"scripts.prepublishOnly\": \"npm run build\",\n});\n\nmkdirp.sync(\"node_modules/@types\");\ncreateModuleSymLink(\"@types/jest\");\ncreateModuleSymLink(\"@types/node\");\n\ncreateFile(\".env\", \"\");\ncreateFile(\".env.sample\", \"# Description\\n# VAR='value'\\n\");\ncreateSymLink(configFile(`gitignore/${gitignoreFile}`), \".gitignore\", { force: true });\ncreateSymLink(configFile(`gitattributes`), \".gitattributes\", { force: true });\ncopyFile(configFile(\"changelog.md\"), \"CHANGELOG.md\");\ncreateFile(\"LICENSE\", \"\");\ncreateFile(\"README.hbs\", handlebars.compile(fs.readFileSync(configFile(\"readme.hbs\"), { encoding: \"utf8\" }))(pkg));\ncreateFile(\".prettierrc.js\", 'module.exports = require(\"moe-scripts/.prettierrc.js\");\\n');\n\n// lint\n// Create node_modules/module symlink for IDE support and config file if not exists.\nif (isTypeScript) {\n  createModuleSymLink(\"tslint\");\n  writeJson(\"tslint.json\", { extends: \"moe-scripts/tslint-backend.json\" });\n} else {\n  createModuleSymLink(\"eslint\");\n  writeJson(\".eslintrc\", { extends: \"./node_modules/moe-scripts/eslint.js\" });\n}\n\n// compiler\nif (isTypeScript) {\n  createSymLink(configFile(\"tsconfig/backend.json\"), \"tsconfig.json\");\n  createSymLink(configFile(\"tsconfig/backend-test.json\"), \"tsconfig-test.json\");\n}\n\n// Format\ncreateModuleSymLink(\"prettier\");\n\ncreateModuleSymLink(\"ts-jest\");\n"]}