{"version":3,"sources":["../../../src/scripts/build/tsc.js"],"names":["path","require","spawn","rimraf","normalizeOutDestination","createSymLink","fromRoot","resolveBin","hasFile","args","process","argv","slice","here","join","__dirname","p","useBuiltinConfig","includes","useSpecifiedOutDir","outDir","sync","result","executable","concat","stdio","exit","status"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;eACmDA,QAAQ,iBAAR,C;IAA3CG,uB,YAAAA,uB;IAAyBC,a,YAAAA,a;;gBACSJ,QAAQ,aAAR,C;IAAlCK,Q,aAAAA,Q;IAAUC,U,aAAAA,U;IAAYC,O,aAAAA,O;;AAE9B,IAAMC,OAAOL,wBAAwBM,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAxB,EAA+C,UAA/C,CAAb;;AACA,IAAMC,OAAO;AAAA,SAAKb,KAAKc,IAAL,CAAUC,SAAV,EAAqBC,CAArB,CAAL;AAAA,CAAb;;AAEA,IAAMC,mBACJ,CAACR,KAAKS,QAAL,CAAc,WAAd,CAAD,IAA+B,CAACV,QAAQ,eAAR,CADlC,C,CAGA;;AACA,IAAIS,gBAAJ,EAAsB;AACpBZ,gBAAcQ,KAAK,oCAAL,CAAd,EAA0D,eAA1D;AACD,C,CAED;AACA;;;AAEA,IAAMM,qBAAqBV,KAAKS,QAAL,CAAc,UAAd,CAA3B;AACA,IAAME,SAASD,qBAAqB,EAArB,GAA0B,CAAC,UAAD,EAAa,KAAb,CAAzC;;AAEA,IAAI,CAACA,kBAAD,IAAuB,CAACV,KAAKS,QAAL,CAAc,YAAd,CAA5B,EAAyD;AACvDf,SAAOkB,IAAP,CAAYf,SAASc,OAAO,CAAP,CAAT,CAAZ;AACD;;AAED,IAAME,SAASpB,MAAMmB,IAAN,CACbd,WAAW,YAAX,EAAyB;AAAEgB,cAAY;AAAd,CAAzB,CADa,EAETH,MAAJ,UAAYI,MAAZ,CAAmBf,IAAnB,CAFa,EAGb;AAAEgB,SAAO;AAAT,CAHa,CAAf;AAMAf,QAAQgB,IAAR,CAAaJ,OAAOK,MAApB","file":"tsc.js","sourcesContent":["const path = require('path');\nconst spawn = require(\"cross-spawn\");\nconst rimraf = require(\"rimraf\");\nconst { normalizeOutDestination, createSymLink } = require(\"../../utils-moe\");\nconst { fromRoot, resolveBin, hasFile } = require(\"../../utils\");\n\nconst args = normalizeOutDestination(process.argv.slice(2), \"--outDir\");\nconst here = p => path.join(__dirname, p);\n\nconst useBuiltinConfig =\n  !args.includes(\"--project\") && !hasFile(\"tsconfig.json\");\n\n// Typescript config file must be located at project root. If there isn't any create sym link to this toolkits\nif (useBuiltinConfig) {\n  createSymLink(here(\"../../config/tsconfig/backend.json\"), \"tsconfig.json\");\n}\n\n// const copyFiles = args.includes(\"--no-copy-files\") ? [] : [\"--copy-files\"];\n// .js ve d.ts copy için şunu kullanmayı düşün: \"rsync -zarvm --include='*/' --include='*.js' --include='*.d.ts' --exclude='*' 'src/' 'lib'\"\n\nconst useSpecifiedOutDir = args.includes(\"--outDir\");\nconst outDir = useSpecifiedOutDir ? [] : [\"--outDir\", \"lib\"];\n\nif (!useSpecifiedOutDir && !args.includes(\"--no-clean\")) {\n  rimraf.sync(fromRoot(outDir[1]));\n}\n\nconst result = spawn.sync(\n  resolveBin(\"typescript\", { executable: \"tsc\" }),\n  [...outDir].concat(args),\n  { stdio: \"inherit\" }\n);\n\nprocess.exit(result.status);\n"]}