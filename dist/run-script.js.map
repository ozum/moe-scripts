{"version":3,"sources":["../src/run-script.js"],"names":["path","require","spawn","glob","process","argv","executor","ignoredBin","script","args","spawnScript","scriptsPath","join","__dirname","scriptsAvailable","sync","scriptsAvailableMessage","map","normalize","s","replace","filter","Boolean","trim","fullMessage","console","log","getEnv","Object","keys","env","key","undefined","reduce","envCopy","toUpperCase","relativeScriptPath","scriptPath","attemptResolve","Error","result","stdio","signal","handleSignal","exit","status","resolve","error"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;oBAEgDG,QAAQC,I;IAAjDC,Q;IAAUC,U;IAAYC,M;IAAWC,I;;AACxC,IAAID,MAAJ,EAAY;AACVE;AACD,CAFD,MAEO;AACL,MAAMC,cAAcX,KAAKY,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAApB;AACA,MAAMC,mBAAmBX,KAAKY,IAAL,CAAUf,KAAKY,IAAL,CAAUC,SAAV,EAAqB,SAArB,EAAgC,GAAhC,CAAV,CAAzB,CAFK,CAGL;AACA;;AACA,MAAMG,0BAA0BF,iBAC7BG,GAD6B,CACzBjB,KAAKkB,SADoB,EAE7BD,GAF6B,CAEzB;AAAA,WACHE,EACGC,OADH,CACWT,WADX,EACwB,EADxB,EAEGS,OAFH,CAEW,WAFX,EAEwB,EAFxB,EAGGA,OAHH,CAGW,OAHX,EAGoB,EAHpB,CADG;AAAA,GAFyB,EAQ7BC,MAR6B,CAQtBC,OARsB,EAS7BV,IAT6B,CASxB,MATwB,EAU7BW,IAV6B,EAAhC;AAWA,MAAMC,cAAe;SACdjB,UAAW;;;IAGhBS,uBAAwB;;;;;;GAJN,CAUlBO,IAVkB,EAApB;AAWAE,UAAQC,GAAR,CAAa,KAAIF,WAAY,IAA7B;AACD;;AAED,SAASG,MAAT,GAAkB;AAChB;AACA;AACA,SAAOC,OAAOC,IAAP,CAAYzB,QAAQ0B,GAApB,EACJT,MADI,CACG;AAAA,WAAOjB,QAAQ0B,GAAR,CAAYC,GAAZ,MAAqBC,SAA5B;AAAA,GADH,EAEJC,MAFI,CAGH,UAACC,OAAD,EAAUH,GAAV,EAAkB;AAChBG,YAAQH,GAAR,IAAe3B,QAAQ0B,GAAR,CAAYC,GAAZ,CAAf;AACA,WAAOG,OAAP;AACD,GANE,EAOH;AACE,KAAE,WAAU1B,OAAO2B,WAAP,EAAqB,EAAjC,GAAqC;AADvC,GAPG,CAAP;AAWD;;AAED,SAASzB,WAAT,GAAuB;AACrB,MAAM0B,qBAAqBpC,KAAKY,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkCL,MAAlC,CAA3B;AACA,MAAM6B,aAAaC,eAAeF,kBAAf,CAAnB;;AACA,MAAI,CAACC,UAAL,EAAiB;AACf,UAAM,IAAIE,KAAJ,CAAW,mBAAkB/B,MAAO,IAApC,CAAN;AACD;;AACD,MAAMgC,SAAStC,MAAMa,IAAN,CAAWT,QAAX,GAAsB+B,UAAtB,SAAqC5B,IAArC,GAA4C;AACzDgC,WAAO,SADkD;AAEzDX,SAAKH;AAFoD,GAA5C,CAAf;;AAKA,MAAIa,OAAOE,MAAX,EAAmB;AACjBC,iBAAaH,MAAb;AACD,GAFD,MAEO;AACLpC,YAAQwC,IAAR,CAAaJ,OAAOK,MAApB;AACD;AACF;;AAED,SAASF,YAAT,CAAsBH,MAAtB,EAA8B;AAC5B,MAAIA,OAAOE,MAAP,KAAkB,SAAtB,EAAiC;AAC/BjB,YAAQC,GAAR,CACG,eAAclB,MAAO,iDAAtB,GACE,qEADF,GAEE,2BAHJ;AAKD,GAND,MAMO,IAAIgC,OAAOE,MAAP,KAAkB,SAAtB,EAAiC;AACtCjB,YAAQC,GAAR,CACG,eAAclB,MAAO,iDAAtB,GACE,qEADF,GAEE,mBAHJ;AAKD;;AACDJ,UAAQwC,IAAR,CAAa,CAAb;AACD;;AAED,SAASN,cAAT,GAAwC;AACtC,MAAI;AAAA;;AACF,WAAO,qBAAQQ,OAAR,2BAAP;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF","file":"run-script.js","sourcesContent":["const path = require(\"path\");\nconst spawn = require(\"cross-spawn\");\nconst glob = require(\"glob\");\n\nconst [executor, ignoredBin, script, ...args] = process.argv;\nif (script) {\n  spawnScript();\n} else {\n  const scriptsPath = path.join(__dirname, \"scripts/\");\n  const scriptsAvailable = glob.sync(path.join(__dirname, \"scripts\", \"*\"));\n  // `glob.sync` returns paths with unix style path separators even on Windows.\n  // So we normalize it before attempting to strip out the scripts path.\n  const scriptsAvailableMessage = scriptsAvailable\n    .map(path.normalize)\n    .map(s =>\n      s\n        .replace(scriptsPath, \"\")\n        .replace(/__tests__/, \"\")\n        .replace(/\\.js$/, \"\")\n    )\n    .filter(Boolean)\n    .join(\"\\n  \")\n    .trim();\n  const fullMessage = `\nUsage: ${ignoredBin} [script] [--flags]\n\nAvailable Scripts:\n  ${scriptsAvailableMessage}\n\nOptions:\n  All options depend on the script. Docs will be improved eventually, but for most scripts you can assume that the args you pass will be forwarded to the respective tool that's being run under the hood.\n\nMay the force be with you.\n  `.trim();\n  console.log(`\\n${fullMessage}\\n`);\n}\n\nfunction getEnv() {\n  // this is required to address an issue in cross-spawn\n  // https://github.com/kentcdodds/moe-scripts/issues/4\n  return Object.keys(process.env)\n    .filter(key => process.env[key] !== undefined)\n    .reduce(\n      (envCopy, key) => {\n        envCopy[key] = process.env[key];\n        return envCopy;\n      },\n      {\n        [`SCRIPTS_${script.toUpperCase()}`]: true\n      }\n    );\n}\n\nfunction spawnScript() {\n  const relativeScriptPath = path.join(__dirname, \"./scripts\", script);\n  const scriptPath = attemptResolve(relativeScriptPath);\n  if (!scriptPath) {\n    throw new Error(`Unknown script \"${script}\".`);\n  }\n  const result = spawn.sync(executor, [scriptPath, ...args], {\n    stdio: \"inherit\",\n    env: getEnv()\n  });\n\n  if (result.signal) {\n    handleSignal(result);\n  } else {\n    process.exit(result.status);\n  }\n}\n\nfunction handleSignal(result) {\n  if (result.signal === \"SIGKILL\") {\n    console.log(\n      `The script \"${script}\" failed because the process exited too early. ` +\n        \"This probably means the system ran out of memory or someone called \" +\n        \"`kill -9` on the process.\"\n    );\n  } else if (result.signal === \"SIGTERM\") {\n    console.log(\n      `The script \"${script}\" failed because the process exited too early. ` +\n        \"Someone might have called `kill` or `killall`, or the system could \" +\n        \"be shutting down.\"\n    );\n  }\n  process.exit(1);\n}\n\nfunction attemptResolve(...resolveArgs) {\n  try {\n    return require.resolve(...resolveArgs);\n  } catch (error) {\n    return null;\n  }\n}\n"]}